name: Auto Version Increment

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  increment-version:
    # Trigger only on PR merge from next branch
    if: |
      github.event.pull_request.merged == true && 
      github.event.pull_request.head.ref == 'next'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if this is a version increment commit
        id: check_commit
        run: |
          # Skip if this commit is already a version increment commit
          PR_TITLE="${{ github.event.pull_request.title || '' }}"
          LATEST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          
          if [[ "$PR_TITLE" == *"Auto-increment version"* ]] || [[ "$LATEST_COMMIT_MSG" == *"Auto-increment version"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "This is already a version increment commit, skipping..."
          elif [ ! -f "test-repo.php" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "test-repo.php not found, skipping..."
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Proceeding with version increment..."
          fi

      - name: Extract current version from next branch package.json
        if: steps.check_commit.outputs.skip == 'false'
        id: current_version
        run: |
          # Debug: Show the package.json content
          echo "=== Debugging version extraction from package.json ==="
          
          # Get version from next branch package.json (the source of truth)
          git fetch origin next
          CURRENT_VERSION=$(git show origin/next:package.json | grep '"version"' | sed 's/.*"version": "\([^"]*\)".*/\1/')
          
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Error: Could not extract version from next branch package.json"
            echo "Package.json content from next branch:"
            git show origin/next:package.json
            exit 1
          fi
          echo "Current version from next branch package.json: $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Increment version
        if: steps.check_commit.outputs.skip == 'false'
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          
          # Split version into parts using portable method
          MAJOR=$(echo "$CURRENT_VERSION" | cut -d'.' -f1)
          MINOR=$(echo "$CURRENT_VERSION" | cut -d'.' -f2)
          PATCH=$(echo "$CURRENT_VERSION" | cut -d'.' -f3)
          
          echo "Current version parts: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT



      - name: Update next branch with incremented version
        if: steps.check_commit.outputs.skip == 'false'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          
          # Switch to next branch and update version there
          git fetch origin next
          git checkout next
          
          echo "=== Updating next branch with incremented version $NEW_VERSION ==="
          echo "Main branch remains unchanged - only next branch gets updated"
          
          # Update version in PHP plugin header
          sed -i "s/Version: [0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*/Version: $NEW_VERSION/" test-repo.php
          
          # Update version in PHP constant
          sed -i "s/define('TEST_REPO_VERSION', '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*')/define('TEST_REPO_VERSION', '$NEW_VERSION')/" test-repo.php
          
          # Update version in PHP class constant
          sed -i "s/const VERSION = '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*'/const VERSION = '$NEW_VERSION'/" test-repo.php
          
          # Update version in package.json
          sed -i "s/\"version\": \"[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\"/\"version\": \"$NEW_VERSION\"/" package.json
          
          # Verify all changes were made
          echo "=== Verifying version updates in next branch ==="
          if ! grep -q "Version: $NEW_VERSION" test-repo.php; then
            echo "Error: Failed to update plugin header version in next branch"
            exit 1
          fi
          
          if ! grep -q "define('TEST_REPO_VERSION', '$NEW_VERSION')" test-repo.php; then
            echo "Error: Failed to update TEST_REPO_VERSION constant in next branch"
            exit 1
          fi
          
          if ! grep -q "const VERSION = '$NEW_VERSION'" test-repo.php; then
            echo "Error: Failed to update class VERSION constant in next branch"
            exit 1
          fi
          
          if ! grep -q "\"version\": \"$NEW_VERSION\"" package.json; then
            echo "Error: Failed to update package.json version in next branch"
            exit 1
          fi
          
          echo "=== Git status before commit ==="
          git status
          
          git add test-repo.php package.json
          git commit -m "Auto-increment version to $NEW_VERSION for next development cycle"
          
          echo "=== Pushing to next branch ==="
          git push origin next
          
          echo "Successfully updated next branch with version $NEW_VERSION"
          echo "Main branch remains unchanged"

      - name: Create Git Tag for Released Version
        if: steps.check_commit.outputs.skip == 'false'
        run: |
          RELEASED_VERSION="${{ steps.current_version.outputs.version }}"
          
          # Switch back to main branch for tagging the released version
          git checkout main
          
          # Check if tag already exists
          if git tag -l "v$RELEASED_VERSION" | grep -q "v$RELEASED_VERSION"; then
            echo "Tag v$RELEASED_VERSION already exists, skipping tag creation"
          else
            git tag -a "v$RELEASED_VERSION" -m "Release version $RELEASED_VERSION"
            git push origin "v$RELEASED_VERSION"
            echo "Created and pushed tag v$RELEASED_VERSION for the released version"
          fi

      - name: Create Release for Released Version
        if: steps.check_commit.outputs.skip == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.current_version.outputs.version }}
          name: Release v${{ steps.current_version.outputs.version }}
          body: |
            ## Release Notes
            - Released version ${{ steps.current_version.outputs.version }}
            - Merged changes from next branch to main
            - Next development version ${{ steps.new_version.outputs.version }} prepared in next branch
            
            ## Version Details
            - Released Version: ${{ steps.current_version.outputs.version }}
            - Next Development Version: ${{ steps.new_version.outputs.version }}
            
            ## Workflow
            - Main branch: Contains released version ${{ steps.current_version.outputs.version }}
            - Next branch: Updated to version ${{ steps.new_version.outputs.version }} for next development cycle
          draft: false
          prerelease: false 