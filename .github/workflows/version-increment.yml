name: Auto Version Increment

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  increment-version:
    # Trigger only on PR merge from next branch
    if: |
      github.event.pull_request.merged == true && 
      github.event.pull_request.head.ref == 'next'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if this is a version increment commit
        id: check_commit
        run: |
          # Skip if this commit is already a version increment commit
          PR_TITLE="${{ github.event.pull_request.title || '' }}"
          LATEST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          
          if [[ "$PR_TITLE" == *"Auto-increment version"* ]] || [[ "$LATEST_COMMIT_MSG" == *"Auto-increment version"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "This is already a version increment commit, skipping..."
          elif [ ! -f "test-repo.php" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "test-repo.php not found, skipping..."
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Proceeding with version increment..."
          fi

      - name: Extract current version
        if: steps.check_commit.outputs.skip == 'false'
        id: current_version
        run: |
          # Debug: Show the file content around version line
          echo "=== Debugging version extraction ==="
          grep -n "Version:" test-repo.php || echo "No Version: line found"
          
          # Extract version from plugin header using sed (more portable than grep -P)
          CURRENT_VERSION=$(sed -n 's/.* Version: \([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*/\1/p' test-repo.php)
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Error: Could not extract version from test-repo.php"
            echo "File content around version:"
            head -10 test-repo.php
            exit 1
          fi
          echo "Current version: $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Increment version
        if: steps.check_commit.outputs.skip == 'false'
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          
          # Split version into parts using portable method
          MAJOR=$(echo "$CURRENT_VERSION" | cut -d'.' -f1)
          MINOR=$(echo "$CURRENT_VERSION" | cut -d'.' -f2)
          PATCH=$(echo "$CURRENT_VERSION" | cut -d'.' -f3)
          
          echo "Current version parts: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in test-repo.php
        if: steps.check_commit.outputs.skip == 'false'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          
          # Create backup
          cp test-repo.php test-repo.php.backup
          
          # Update version in plugin header
          sed -i "s/Version: [0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*/Version: $NEW_VERSION/" test-repo.php
          
          # Update version in constant
          sed -i "s/define('TEST_REPO_VERSION', '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*')/define('TEST_REPO_VERSION', '$NEW_VERSION')/" test-repo.php
          
          # Update version in class constant
          sed -i "s/const VERSION = '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*'/const VERSION = '$NEW_VERSION'/" test-repo.php
          
          # Verify all changes were made
          echo "=== Verifying version updates ==="
          if ! grep -q "Version: $NEW_VERSION" test-repo.php; then
            echo "Error: Failed to update plugin header version"
            cp test-repo.php.backup test-repo.php
            exit 1
          fi
          
          if ! grep -q "define('TEST_REPO_VERSION', '$NEW_VERSION')" test-repo.php; then
            echo "Error: Failed to update TEST_REPO_VERSION constant"
            cp test-repo.php.backup test-repo.php
            exit 1
          fi
          
          if ! grep -q "const VERSION = '$NEW_VERSION'" test-repo.php; then
            echo "Error: Failed to update class VERSION constant"
            cp test-repo.php.backup test-repo.php
            exit 1
          fi
          
          echo "Successfully updated all version references to $NEW_VERSION"
          echo "=== Updated lines ==="
          grep -n "Version:\|TEST_REPO_VERSION\|const VERSION" test-repo.php

      - name: Commit and push version update to main
        if: steps.check_commit.outputs.skip == 'false'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          
          # Check if there are changes to commit
          if git diff --quiet test-repo.php; then
            echo "No changes detected in test-repo.php"
            exit 0
          fi
          
          echo "=== Git status before commit ==="
          git status
          
          git add test-repo.php
          git commit -m "Auto-increment version to $NEW_VERSION after merge"
          
          echo "=== Pushing to main branch ==="
          git push origin main
          
          echo "Successfully pushed version update to main branch"

      - name: Create Git Tag
        if: steps.check_commit.outputs.skip == 'false'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          
          # Check if tag already exists
          if git tag -l "v$NEW_VERSION" | grep -q "v$NEW_VERSION"; then
            echo "Tag v$NEW_VERSION already exists, skipping tag creation"
          else
            git tag -a "v$NEW_VERSION" -m "Version $NEW_VERSION"
            git push origin "v$NEW_VERSION"
            echo "Created and pushed tag v$NEW_VERSION"
          fi

      - name: Create Release
        if: steps.check_commit.outputs.skip == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          name: Release v${{ steps.new_version.outputs.version }}
          body: |
            ## Changes
            - Auto-incremented version from ${{ steps.current_version.outputs.version }} to ${{ steps.new_version.outputs.version }}
            - Merged changes from next branch
            
            ## Version Details
            - Previous Version: ${{ steps.current_version.outputs.version }}
            - New Version: ${{ steps.new_version.outputs.version }}
            
            ## Trigger
            - Triggered by: ${{ github.event_name }}
          draft: false
          prerelease: false 