name: Auto Version Increment

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  increment-version:
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'next'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract current version
        id: current_version
        run: |
          # Extract version from plugin header
          CURRENT_VERSION=$(grep -oP '(?<=Version: )\d+\.\d+\.\d+' test-repo.php)
          echo "Current version: $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Increment version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          
          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in test-repo.php
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          
          # Update version in plugin header
          sed -i "s/Version: [0-9]\+\.[0-9]\+\.[0-9]\+/Version: $NEW_VERSION/" test-repo.php
          
          # Update version in constant
          sed -i "s/define('TEST_REPO_VERSION', '[0-9]\+\.[0-9]\+\.[0-9]\+')/define('TEST_REPO_VERSION', '$NEW_VERSION')/" test-repo.php
          
          # Update version in class constant
          sed -i "s/const VERSION = '[0-9]\+\.[0-9]\+\.[0-9]\+'/const VERSION = '$NEW_VERSION'/" test-repo.php

      - name: Checkout next branch
        run: |
          git fetch origin next
          git checkout next

      - name: Update version in next branch
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          
          # Update version in plugin header
          sed -i "s/Version: [0-9]\+\.[0-9]\+\.[0-9]\+/Version: $NEW_VERSION/" test-repo.php
          
          # Update version in constant
          sed -i "s/define('TEST_REPO_VERSION', '[0-9]\+\.[0-9]\+\.[0-9]\+')/define('TEST_REPO_VERSION', '$NEW_VERSION')/" test-repo.php
          
          # Update version in class constant
          sed -i "s/const VERSION = '[0-9]\+\.[0-9]\+\.[0-9]\+'/const VERSION = '$NEW_VERSION'/" test-repo.php

      - name: Commit version update to next branch
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          
          git add test-repo.php
          git commit -m "Auto-increment version to $NEW_VERSION" || echo "No changes to commit"
          git push origin next

      - name: Checkout main branch and update
        run: |
          git checkout main
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          
          # Update version in plugin header
          sed -i "s/Version: [0-9]\+\.[0-9]\+\.[0-9]\+/Version: $NEW_VERSION/" test-repo.php
          
          # Update version in constant
          sed -i "s/define('TEST_REPO_VERSION', '[0-9]\+\.[0-9]\+\.[0-9]\+')/define('TEST_REPO_VERSION', '$NEW_VERSION')/" test-repo.php
          
          # Update version in class constant
          sed -i "s/const VERSION = '[0-9]\+\.[0-9]\+\.[0-9]\+'/const VERSION = '$NEW_VERSION'/" test-repo.php

      - name: Commit version update to main branch
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          
          git add test-repo.php
          git commit -m "Auto-increment version to $NEW_VERSION after merge from next" || echo "No changes to commit"
          git push origin main

      - name: Create Git Tag
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          git tag -a "v$NEW_VERSION" -m "Version $NEW_VERSION"
          git push origin "v$NEW_VERSION"

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          release_name: Release v${{ steps.new_version.outputs.version }}
          body: |
            ## Changes
            - Auto-incremented version from ${{ steps.current_version.outputs.version }} to ${{ steps.new_version.outputs.version }}
            - Merged changes from next branch
            
            ## Version Details
            - Previous Version: ${{ steps.current_version.outputs.version }}
            - New Version: ${{ steps.new_version.outputs.version }}
          draft: false
          prerelease: false 